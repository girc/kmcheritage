<?php

namespace common\models;

use common\helpers\pelexif\Gps;
use Imagine\Gd\Imagine;
use Imagine\Image\Box;
use Imagine\Image\ImageInterface;
use Yii;
use yii\base\Event;
use yii\behaviors\TimestampBehavior;
use yii\helpers\ArrayHelper;

/**
 * This is the model class for table "monument_photo".
 *
 * @property string $id
 * @property string $monument_id
 * @property string $title
 * @property string $description
 * @property string $category
 * @property integer $rank
 * @property string $filename_original
 * @property string $filename_medium
 * @property string $filename_thumb
 * @property double $latitude
 * @property double $longitude
 * @property boolean $verified
 * @property string $created_at
 * @property string $updated_at
 *
 * @property Monument $monument
 */
class MonumentPhoto extends \yii\db\ActiveRecord
{
    /**
     * @var mixed image the attribute for rendering the file input
     * widget for upload on the form
     */
    public $image;
    public $uploadPath, $uploadUrl;

    const IMAGE_VERSION_ORIGINAL = 'original';
    const IMAGE_VERSION_MEDIUM = 'medium';
    const IMAGE_VERSION_THUMB = 'thumb';

    /**
     * @var bool flag that indicates whether to process for new rank in afterSave
     */
    protected $_processRank = false;

    /**
     * Initializes the object.
     * This method is called at the end of the constructor.
     * The default implementation will trigger an [[EVENT_INIT]] event.
     * If you override this method, make sure you call the parent implementation at the end
     * to ensure triggering of the event.
     */
    public function init()
    {
        parent::init(); // TODO: Change the autogenerated stub
        $this->uploadPath = Yii::$app->params['uploadPath'] = Yii::getAlias('@uploadsPath/');
        $this->uploadUrl = Yii::$app->params['uploadUrl'] = Yii::getAlias('@uploadsUrl/');
    }


    /**
     * @inheritdoc
     */
    public static function tableName()
    {
        return 'monument_photo';
    }

    /**
     * @inheritdoc
     */
    public function rules()
    {
        return [
            [['monument_id', 'rank'], 'integer'],
            [['description'], 'string'],
            [['latitude', 'longitude'], 'number'],
            [['verified'], 'boolean'],
            [['created_at', 'updated_at'], 'safe'],
            [['title'], 'string', 'max' => 255],
            [['category'], 'string', 'max' => 10],
            [['filename_original', 'filename_medium', 'filename_thumb'], 'string', 'max' => 25]
        ];
    }

    /**
     * @inheritdoc
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'monument_id' => 'Monument ID',
            'title' => 'Title',
            'description' => 'Description',
            'category' => 'Category',
            'rank' => 'Rank',
            'filename_original' => 'Filename Original',
            'filename_medium' => 'Filename Medium',
            'filename_thumb' => 'Filename Thumb',
            'latitude' => 'Latitude',
            'longitude' => 'Longitude',
            'verified' => 'Verified',
            'created_at' => 'Created At',
            'updated_at' => 'Updated At',
        ];
    }

    /**
     * @return \yii\db\ActiveQuery
     */
    public function getMonument()
    {
        return $this->hasOne(Monument::className(), ['id' => 'monument_id']);
    }

    /**
     * @inheritdoc
     * @return MonumentPhotoQuery the active query used by this AR class.
     */
    public static function find()
    {
        return new MonumentPhotoQuery(get_called_class());
    }

    public function behaviors()
    {
        return ArrayHelper::merge(parent::behaviors(), [
                [// Auto populates Timestamp for created and update events
                    'class' => TimestampBehavior::className(),
                    'createdAtAttribute' => 'created_at',
                    'updatedAtAttribute' => 'updated_at',
                    'value' => new Expression("Now() AT TIME ZONE 'UTC'"),
                ],
            ]
        ); // TODO: Change the autogenerated stub
    }

    //{{{ functions for $image
    public function getFolderName(){
        return implode(
            DIRECTORY_SEPARATOR,
            [
                $this->id
            ]
        );
    }

    /**
     * fetch stored image file name with complete path
     * @return string
     */
    public function getOriginalImageFile()
    {
        return isset($this->original) ? Yii::$app->params['uploadPath'] . $this->original : null;
    }

    /**
     * fetch stored image url
     * @return string
     */
    public function getOriginalImageUrl()
    {
        return Yii::$app->params['uploadUrl'] . $this->original;
    }

    /**
     * fetch stored image file name with complete path
     * @return string
     */
    public function getMediumImageFile()
    {
        return isset($this->medium) ? Yii::$app->params['uploadPath'] . $this->medium : null;
    }

    /**
     * fetch stored image url
     * @return string
     */
    public function getMediumImageUrl()
    {
        return Yii::$app->params['uploadUrl'] . $this->medium;
    }

    /**
     * fetch stored image file name with complete path
     * @return string
     */
    public function getThumbImageFile()
    {
        return isset($this->thumb) ? Yii::$app->params['uploadPath'] . $this->thumb : null;
    }

    /**
     * fetch stored image url
     * @return string
     */
    public function getThumbImageUrl()
    {
        return Yii::$app->params['uploadUrl'] . $this->thumb;
    }

    /**
     * Process deletion of image
     *
     * @return boolean the status of deletion
     */
    public function deleteImage()
    {
        // remove files
        if (is_file($this->getOriginalImageFile()))
            @unlink($this->getOriginalImageFile());
        if (is_file($this->getMediumImageFile()))
            @unlink($this->getMediumImageFile());
        if (is_file($this->getThumbImageFile()))
            @unlink($this->getThumbImageFile());
        // Modify attributes then save
        $this->original = null;
        $this->medium = null;
        $this->thumb = null;
        return true;
    }

    /**
     * @param $uploadedImage \yii\web\UploadedFile
     * @return bool
     */
    public function saveUploadedImage($uploadedImage){
        return $this->saveImage($uploadedImage->tempName,$uploadedImage->extension);
    }

    /**
     * @param $filePath string full file name
     * @return bool
     */
    public function saveImage($filePath,$extension)
    {
        // Get sizes
        list($width, $height) = getimagesize($filePath);

        //using GD library with imagine
        $imagine = new Imagine();
        $imagineImage = $imagine->open($filePath);

        $upload_dir = Yii::getAlias('@uploadsPath/');

        // Set Model Properties
        $this->original = implode('_', [$this->id, Yii::$app->security->generateRandomString(5)]) . '.' . $extension;
        $this->medium = implode('_', [$this->id, Yii::$app->security->generateRandomString(5), 'm']) . '.' . $extension;
        $this->thumb = implode('_', [$this->id, Yii::$app->security->generateRandomString(5), 't']) . '.' . $extension;

        // Now save model and save photos then return true
        if ($this->save()) {
            // filename with path
            $originalFile = $upload_dir . $this->original;
            $mediumFile = $upload_dir . $this->medium;
            $thumbFile = $upload_dir . $this->thumb;

            //original
            $imagineImage->save($originalFile);
            Gps::addGpsInfo($originalFile, $originalFile, $this->description, null, null, 27, 56, 0, null);

            // Medium size
            $medium = $imagineImage->save($mediumFile);
            Gps::addGpsInfo($mediumFile, $mediumFile, $this->description, null, null, 27, 56, 0, null);
            if ($height > 300 || $width > 400) {
                $medium->resize(new Box(400, 300), ImageInterface::FILTER_UNDEFINED)->save($mediumFile);
            }

            // Thumbnail
            $thumb = $imagineImage->save($thumbFile);
            Gps::addGpsInfo($thumbFile, $thumbFile, $this->description, null, null, 27, 56, 0, null);
            if ($height > 59) {
                switch ($height > $width) {
                    case true:
                        $mode = ImageInterface::THUMBNAIL_INSET;
                        break;
                    case false:
                        $mode = ImageInterface::THUMBNAIL_OUTBOUND;
                        break;
                    default:
                        break;
                }
                $thumb->thumbnail(new Box(89, 59), $mode)->save($thumbFile);
            }
            return true;
        }
    }

    /**
     * @param $uploadedImage \yii\web\UploadedFile
     * @return bool
     */
    public function replaceUploadedImage($uploadedImage){
        return $this->replaceImage($uploadedImage->tempName,$uploadedImage->extension);
    }

    /**
     * @param $filePath string
     * @param $extension string
     * @return bool
     */
    public function replaceImage($filePath,$extension)
    {
        $this->deleteImage();
        $this->saveImage($filePath,$extension);
    }
    //Static Functions
    /**
     * fetch stored image file name with complete path
     * @param string $version
     * @return null|string
     * @throws Exception
     */
    public static function getImagePath($id, $version = self::IMAGE_VERSION_ORIGINAL)
    {
        if (!isset($id)) {
            throw new \yii\base\Exception('Id must be specified');
        }
        $model = self::findOne($id);
        switch ($version) {
            case self::IMAGE_VERSION_ORIGINAL:
                return $model->getOriginalImageFile();
                break;
            case self::IMAGE_VERSION_MEDIUM:
                return $model->getMediumImageFile();
                break;
            case self::IMAGE_VERSION_THUMB:
                return $model->getThumbImageFile();
                break;
            default:
                throw new Exception('Could not find the specified image version <' . $version . '> Following versions are available:<br/><ul><li>IMAGE_VERSION_ORIGINAL="original"</li><li>IMAGE_VERSION_MEDIUM="medium"</li><li>IMAGE_VERSION_THUMB="thumb"</li></ul>');
        }
    }

    public static function getImageUrl($id, $version = self::IMAGE_VERSION_ORIGINAL)
    {
        if (!isset($id)) {
            throw new \yii\base\Exception('Id must be specified');
        }
        $model = self::findModel($id);
        switch ($version) {
            case self::IMAGE_VERSION_ORIGINAL:
                return $model->getOriginalImageUrl();
                break;
            case self::IMAGE_VERSION_MEDIUM:
                return $model->getMediumImageUrl();
                break;
            case self::IMAGE_VERSION_THUMB:
                return $model->getThumbImageUrl();
                break;
            default:
                throw new Exception('Could not find the specified image version <' . $version . '> Following versions are available:<br/><ul><li>IMAGE_VERSION_ORIGINAL="original"</li><li>IMAGE_VERSION_MEDIUM="medium"</li><li>IMAGE_VERSION_THUMB="thumb"</li></ul>');
        }
    }

    public function getNewRank()
    {
        return $this->building->getPhotos()->count() + 1;
    }

    public function setRank($rank)
    {
        if (!$rank) {
            throw new \yii\base\Exception('Rank not Specified');
        }
        $this->rank = $rank;
    }
    //}}}
}
